@use 'abstracts/modules/generate';
@use 'abstracts/modules/math';
// not fluid - 10 16 20 30 40 50 60 120 150 = 9x
// fluid - 50 30, 50 80, 150 20, 50 20, 40 20, 60 40, 200 70, 150 50 = 8x
:root {
	@include generate.all((
			'colors' : (
					'src' : ('neutral' : (hsl(225, 13%, 12%))),
					'tints' : (20%, 45%, 75%, 92%, 100%),
					'shades' : (30%),
			),
			'font-types' : (
					'base' : 0.64rem,
					'ratio' : 1.333,
					'length' : 4,
			),
			'fluid-font-types' : (
					'src' : (
							math.clamped(3rem, 4.5rem),
							math.clamped(3rem, 6rem),
							math.clamped(7.5rem, 15.625rem, $width-md, $width-xl)
					),
			),
			'space-types' : (
					'base' : 0.5rem,
					'ratio' : 'augmented fourth',
					'length' : 9,
			),
			'fluid-space-types' : (
					'base' : ('min': 0.85rem, 'max': 1rem),
					'ratio' : ('min': 1.200, 'max': 1.333),
					'length' : 10,
			),
			'utilities' : (
					'src' : (
							generate.$font-weights,
							generate.$line-heights,
							generate.$measures,
							generate.$displays,
							generate.$text-aligns,
							generate.$aligns,
							generate.$justifys,
							generate.$self-aligns,
							generate.$self-justifys,
							generate.$directions,
					)
			),)
	);

	--ff-primary    : 'League Spartan', sans-serif;
	--ff-body       : var(--ff-primary);
	--ff-heading    : var(--ff-primary);
	--outline-size  : max(1px, 0.15em);
	--outline-style : solid;
	--outline-color : currentColor;
	--space-body-1  : #{math.clamped(2rem, 6rem, $width-md, $width-xl)};
	--space-body-2  : #{math.clamped(2rem, 10rem, $width-md, $width-xl)};
	--body-size     : 69.375rem;
	--body-sizing   : min(100% - var(--space-body-1) * 2, var(--body-size));
}

.sr-only {
	position    : absolute;
	overflow    : hidden;
	margin      : -1px;
	padding     : 0;
	width       : 1px;
	height      : 1px;
	white-space : nowrap;
	clip        : rect(0, 0, 0, 0);
	border      : 0;
}

.darken-image {
	--_darken : var(--darken, 0.45);

	position : relative;

	& :not(picture) {
		z-index : 1;
	}

	picture::before {
		content          : "";
		position         : absolute;
		inset            : 0;
		background-color : hsl(var(--clr-neutral-7));
		opacity          : var(--_darken);
		border-radius    : inherit;
		transition       : opacity var(--darken-image-duration, 300ms) var(--darken-image-timing, ease-in-out);
	}
}

[class*="title-border"] {
	&::before {
		content          : "";
		display          : block;
		margin-block-end : 0.8em;
		inline-size      : 4rem;
		block-size       : 1px;
		background-color : hsl(var(--clr-neutral-3));
	}
}

.title-border\/\/#{'above-md'} {
	@media (width < $width-md) {
		&::before {
			display : none;
		}
	}
}

.title-border\/\/#{'below-lg'} {
	@media (width >= $width-lg) {
		&::before {
			display : none;
		}
	}
}

.title-floated {
	--_translate-inline   : var(--translate-inline, 0);
	--_translate-block    : var(--translate-block, -0.85em);
	--_inset-inline-start : var(--inset-inline-start, 0);
	--_inset-inline-end   : var(--inset-inline-end, auto);
	--_inset-block-start  : var(--inset-block-start, auto);
	--_inset-block-end    : var(--inset-block-end, auto);

	position              : absolute;
	translate             : var(--_translate-inline) var(--_translate-block);
	inset                 : var(--_inset-block-start) var(--_inset-inline-end) var(--_inset-block-end) var(--_inset-inline-start);

	& + * {
		margin-block-start : 0;
	}
}

.relative {
	position : relative;
}

:where([class^="align"], [class*="direction"], [class^="justify"]) {
	display : flex;
}
